import bind_shamirSecretShare from './tss.jsy'
import { randomBytes, u8_to_base64, base64_to_u8 } from './utils.nodejs.jsy'

function isBinarySecret(arg) ::
  return arg instanceof Uint8Array
    || Buffer.isBuffer(arg)

export const ShamirSecretShare = bind_shamirSecretShare @:
  isBinarySecret, randomBytes, u8_to_base64, base64_to_u8
export default ShamirSecretShare
export const ShamirTSS = ShamirSecretShare

export function generateShares(secret, thresholdShares, totalShares) ::
  return new ShamirSecretShare().generate(secret, thresholdShares, totalShares)
export function generatorShares(secret, thresholdShares, totalShares) ::
  return new ShamirSecretShare().generator(secret, thresholdShares, totalShares)
export function unlockShares(shares_of_secret, valueIfUnderThreshold) ::
  return new ShamirSecretShare().unlock(shares_of_secret, valueIfUnderThreshold)

export function generateShares_b64(secret, thresholdShares, totalShares) ::
  return new ShamirSecretShare().generate_b64(secret, thresholdShares, totalShares)
export function generatorShares_b64(secret, thresholdShares, totalShares) ::
  return new ShamirSecretShare().generator_b64(secret, thresholdShares, totalShares)
export function unlockShares_b64(shares_of_secret, valueIfUnderThreshold) ::
  return new ShamirSecretShare().unlock_b64(shares_of_secret, valueIfUnderThreshold)

export @{} isBinarySecret, randomBytes, u8_to_base64, base64_to_u8
