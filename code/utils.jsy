
#IF PLAT_WEB

  export function randomBytes(count) ::
    return crypto.getRandomValues(new Uint8Array(count))

  const _fromCharCode = String.fromCharCode
  export function u8_to_base64(u8) ::
    if u8 instanceof ArrayBuffer ::
      u8 = new Uint8Array(u8)

    let res=''
    const len = u8.byteLength
    for let i=0; i<len; i++ ::
      res += _fromCharCode(u8[i])
    return btoa(res)
      .replace(/\+/g, '-').replace(/\//g, '_')

  const _charCodeAt = ''.charCodeAt
  export function base64_to_u8(str_b64) ::
    const sz = atob @ str_b64.replace(/-/g, '+').replace(/_/g, '/')
    const len = sz.length
    const res = new Uint8Array(len)
    for let i=0; i<len; i++ ::
      res[i] = _charCodeAt.call(sz, i)
    return res

  export function isBinarySecret(arg) ::
    return arg instanceof Uint8Array



#ELIF PLAT_NODEJS

  const {randomBytes: _randomBytes} = require('crypto')

  export function randomBytes(count) ::
    return Uint8Array.from @ _randomBytes(count)

  export function u8_to_base64(u8) ::
    return Buffer.from(u8).toString('base64')
      .replace(/\+/g, '-').replace(/\//g, '_')

  export function base64_to_u8(str_b64) ::
    return Uint8Array.from @ Buffer.from(str_b64, 'base64')

  export function isBinarySecret(arg) ::
    return arg instanceof Uint8Array
      || Buffer.isBuffer(arg)

